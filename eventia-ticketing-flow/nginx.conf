server {
    listen 80;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass http://backend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Auth endpoint for admin panel
    location = /auth {
        internal;
        proxy_pass http://backend:3000/auth;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Admin UI secured by auth
    location /admin-ui/ {
        auth_request /auth;
        auth_request_set $auth_status $upstream_status;
        
        # Pass the Authorization header to the backend
        proxy_set_header Authorization $http_authorization;
        
        # Redirect to login if auth fails
        error_page 401 = @error401;
        
        # Proxy to mongo-express
        proxy_pass http://mongo-express:8081/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Handle 401 errors with a basic auth prompt
    location @error401 {
        add_header WWW-Authenticate 'Basic realm="Eventia Admin Panel"' always;
        return 401 "Authentication required";
    }
} 