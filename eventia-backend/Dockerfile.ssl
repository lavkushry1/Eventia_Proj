FROM python:3.11-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt .

# Install dependencies into a virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Second stage: runtime image
FROM nginx:stable-alpine

# Install dependencies for acme.sh
RUN apk add --no-cache curl socat openssl bash tzdata ca-certificates py3-pip supervisor && \
    pip3 install --no-cache-dir requests

# Install acme.sh (a lightweight ACME client)
ENV LE_CONFIG_HOME="/etc/acme.sh"
RUN mkdir -p /etc/acme.sh && \
    curl https://get.acme.sh | sh -s email=ssl@eventia.live && \
    ln -s /root/.acme.sh/acme.sh /usr/local/bin/acme.sh

# Copy Python virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set up directories for Nginx and Certbot
RUN mkdir -p /var/www/certbot && \
    mkdir -p /etc/letsencrypt/live/api.eventia.live && \
    mkdir -p /etc/nginx/ssl

# Generate strong DH parameters for perfect forward secrecy
RUN openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048

# Copy application code
WORKDIR /app
COPY . .

# Create a non-root user to run the application
RUN adduser -D appuser && \
    chown -R appuser:appuser /app

# Copy Nginx configuration
COPY nginx/ssl.conf /etc/nginx/conf.d/default.conf

# Create security.txt
RUN mkdir -p /usr/share/nginx/html/.well-known
RUN echo "Contact: mailto:security@eventia.live\nExpires: 2030-01-01T00:00:00.000Z\nEncryption: https://eventia.live/.well-known/pgp-key.txt\nPreferred-Languages: en\nCanonical: https://eventia.live/.well-known/security.txt\nPolicy: https://eventia.live/security-policy" > /usr/share/nginx/html/.well-known/security.txt

# Copy SSL renewal scripts
COPY scripts/renew-cert.sh /etc/periodic/daily/
COPY scripts/check-cert.sh /etc/periodic/weekly/
RUN chmod +x /etc/periodic/daily/renew-cert.sh /etc/periodic/weekly/check-cert.sh

# Copy supervisor configuration
COPY supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_ENV=production \
    PORT=3000

# Create a directory for static files
RUN mkdir -p /app/static/uploads && \
    chmod 755 /app/static/uploads

# Expose ports
EXPOSE 80 443 3000

# Start services with supervisord
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 